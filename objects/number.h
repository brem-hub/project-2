#ifndef PROJECT_CPP_OBJECTS_NUMBER_H_
#define PROJECT_CPP_OBJECTS_NUMBER_H_

#include <fstream>

/*
 * Абстрактный класс, описывающий интерфейс числа.
 */
class number {
 public:
  // тип числа. Т.к. у нас происходит сериализация, то мы должны знать какой именно тип мы пытаемся дисериализовать.
  enum {COMPLEX, FRACTION, POLAR};

  virtual ~number() = default;

  /*
   * Вывод числа в файл в human-readable виде.
   * @param: out - дескриптор файла, открытый на запись.
   */
  virtual void out(FILE* out) = 0;

  /*
   * Случайное заполнение числа.
   */
  virtual void random() = 0;

  /*
   * Double представление числа.
   * @returns: double представление числа.
   */
  virtual double castToDouble() = 0;

  /*
   * Вывести число в файл в формате ввода.
   * @param: out - дескриптор файла, открытый на запись.
   */
  virtual void outConfig(FILE* out) = 0;

  /*
   * Считать число из консоли.
   * Т.к. мы получаем тип числа из входных данных, мы не можем делегировать создание числа конструктору, т.к.
   *     во-первых, в конструкторе сложно обрабатывать ошибки при чтении данных,
   *     во-вторых, мы не можем выбрать конструктор до тех пор, пока не считаем тип.
   * Поэтому, создавать новое число поддерживаемого типа (см. перечисление) будем в статическом методе.
   *
   * @param: in - дескриптор файла, открытого на чтение.
   * @returns: ссылку на число или NULL, если произошла ошибка.
   */
  static number* readNumber(FILE* in);
};

#endif //PROJECT_CPP_OBJECTS_NUMBER_H_
