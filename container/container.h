#ifndef PROJECT_CPP_CONTAINER_CONTAINER_H_
#define PROJECT_CPP_CONTAINER_CONTAINER_H_

#define MAX_CONTAINER_SIZE 10001

#include "../objects/number.h"
#include "../objects/complex.h"
#include "../objects/fraction.h"
#include "../objects/polar.h"


/*
 * Класс контейнера, хранящего в себе числа.
 */
class container {
 public:
  container();
  ~container();

  /*
   * Получить текущий размер контейнера.
   * @returns: текущий размер контейнера.
   */
  int size() const { return _size; }

  /*
   * Заполнить контейнер из файла.
   * @param: in - дескриптор файла, открытого для чтения.
   * @returns: код статуса операции.
   */
  int fill(FILE* in);

  /*
   * Случайное заполнение контейнера size элементами.
   * @param: size - количество генерируемых элементов.
   * @param: out - [optional] дескриптор файла, открытого на вывод для записи сгенерированных элементов.
   * @returns: код статуса операции.
   */
  int randomFill(int size, FILE* out = nullptr);

  /*
   * Сортировать контейнер по вещественному представлению чисел в порядке возрастания.
   */
  void straightSort();

  /*
   * Вывод содержимого контейнера в файл.
   * @param: out - дескриптор файла, открытого на запись.
   */
  void out(FILE*);
 private:
  /*
   * Добавить число в контейнер.
   * Это внутренний метод контейнера, т.к. мы передаем ссылку на число, следовательно,
   *     если мы добавим ссылку в контейнер и очистим пямять по некой другой ссылке, то при попытке получить доступ к
   *     данному элементу мы получим ошибку доступа к памяти. Однако внутри контейнера мы гарантируем,
   *     что ссылка не будет очищена или объект по этой ссылке не будет изменен.
   * Для реализации публичного метода add() необходимо копировать(deep-copy) объект из ссылки,
   *     т.е. создать виртульный метод в классе number, который будет переопределяться
   *     в каждом классе-наследнике и копировать объект по значению.
   * @param: num - число, которое добавляется.
   * @returns: код статуса операции.
   */
  int add(number* num);
 private:
  int _size;  // размер контейнера.
  number** _array;  // динамический массив чисел.

};

#endif //PROJECT_CPP_CONTAINER_CONTAINER_H_
